
### Реализовать приложение на базе фреймворка Spring Boot 2 и Java минимум 8 версии.
Дополнительно: Spring JPA, Lombok, PostgreSQL

/////////// Пример структуры таблиц в БД PostgreSQL.
1. Таблица товар. Хранит название товара.
Колонки: id, name.
2. Таблица цена товара. Хранит цену на товар и дату с которой цена актуальная. По каждому товару может быть несколько цен с разными датами.
Колонки: id, price, date, product_id.
В приложении в classpath должны быть файлы с sql скриптами:
- создание таблиц сущностей
- заполнение стартовыми данными таблиц (минимум 3 продукта с разными ценами за 3 разные даты)

///////////Стартовый функционал приложения.

Логгирование выполняется в консоль.

----------Приложение должно предоставлять Rest методы:
1. Получение списка товаров с актуальной на день запроса ценой
Запрос GET /products?date=yyyy-mm-dd
Формат данных ответа - json. Массив [{"name": "Товар 1", "price": 100.99} ,  {"name": "Товар 2", "price": 99.99}]
Размер списка вовзращаемого списка должен быть выведен в логи на уровне infо, в случае пустого списка - уровень warn.

2. Получение товара по id с актуальной на день запроса ценой.
Запрос GET /products/id
Формат данных ответа - json. {"name": "Товар 1", "price": 100.99}
В случае остутствия товара с данным id пишутся логи с уровнем error и должно быть выбрано соотвествующее исключение.

3. Получение статистики.
Получение статистики по загруженным товарам и ценам.
GET /products/statistic
Формат данных ответа - json.
Параметры статистики:
- Количество товаров в БД. Формат - просто цифра.
Количество логгируем с уровнем info
- Как часто менялась цена товара. Группировка по товарам. Формат - Массив [{"name": "Товар 1", "frequency": 2} ]
Размер списка вовзращаемого списка должен быть выведен в логи на уровне infо, в случае пустого списка - уровень warn.
- Как часто менялась цена товара. Группировка по дням. Формат - Массив [{"date": "yyyy-mm-dd", "frequency": 6} ]
Размер списка вовзращаемого списка должен быть выведен в логи на уровне infо, в случае пустого списка - уровень warn.

Каждый параметр статистики необходимо запрашивать в отдельном параллельном потоке.